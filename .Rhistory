senators <- df %>%
filter(Service == "Senate") %>%
mutate(ccc = str_split(Congress, " "))
senators <- df %>%
filter(Service == "Senate") %>%
separate(Congress, into = c("Congress_no", "Year")))
senators <- df %>%
filter(Service == "Senate") %>%
separate(Congress, into = c("Congress_no", "Year"))
senators <- df %>%
filter(Service == "Senate") %>%
separate(Congress, into = c("Congress_no", "Year"), sep= " ")
senators <- df %>%
filter(Service == "Senate") %>%
separate(Congress, into = c("Congress_no", "Year"), sep= " ") %>%
mutate(Congress_no = str_sub(string = Congress_no, start = 1, end = nchar(Congress_no)-2))
str(senators)
senators <- df %>%
filter(Service == "Senate") %>%
separate(Congress, into = c("Congress_no", "Year"), sep= " ") %>%
mutate(Congress_no = str_sub(string = Congress_no, start = 1, end = nchar(Congress_no)-2)) %>%
mutate(across(Congress_no, as_factor))
str(senators)
senators <- df %>%
filter(Service == "Senate") %>%
separate(Congress, into = c("Congress_no", "Year"), sep= " ") %>%
mutate(Congress_no = str_sub(string = Congress_no, start = 1, end = nchar(Congress_no)-2)) %>%
mutate(across(Congress_no, as_double))
senators <- df %>%
filter(Service == "Senate") %>%
separate(Congress, into = c("Congress_no", "Year"), sep= " ") %>%
mutate(Congress_no = str_sub(string = Congress_no, start = 1, end = nchar(Congress_no)-2)) %>%
mutate(across(Congress_no, as.numeric))
str(senators)
senators <- df %>%
filter(Service == "Senate") %>%
separate(Congress, into = c("Congress_no", "Year"), sep= " ") %>%
mutate(Congress_no = str_sub(string = Congress_no, start = 1, end = nchar(Congress_no)-2)) %>%
mutate(across(Congress_no, as.numeric)) %>%
ggplot(aes(x = Congress_no)) %>%
geom_histogram()
senators <- df %>%
filter(Service == "Senate") %>%
separate(Congress, into = c("Congress_no", "Year"), sep= " ") %>%
mutate(Congress_no = str_sub(string = Congress_no, start = 1, end = nchar(Congress_no)-2)) %>%
mutate(across(Congress_no, as.numeric)) %>%
ggplot(aes(x = Congress_no)) +
geom_histogram()
senators <- df %>%
filter(Service == "Senate") %>%
separate(Congress, into = c("Congress_no", "Year"), sep= " ") %>%
mutate(Congress_no = str_sub(string = Congress_no, start = 1, end = nchar(Congress_no)-2)) %>%
mutate(across(Congress_no, as.numeric))
senators %>%
ggplot(aes(x = Congress_no)) +
geom_histogram()
senators %>%
ggplot(aes(x = Congress_no)) +
geom_histogram(bins = 1) +
senators %>%
ggplot(aes(x = Congress_no)) +
geom_histogram(bins = 1)
senators %>%
ggplot(aes(x = Congress_no)) +
geom_histogram(bins = 150)
senators %>%
ggplot(aes(x = Congress_no)) +
geom_histogram(bins = 100)
?geom_histogram
senators %>%
ggplot(aes(x = Congress_no)) +
geom_histogram(bins = 100) %>%
lims(x = c(0, 117))
senators %>%
ggplot(aes(x = Congress_no)) +
geom_histogram(bins = 100) %>%
lims(x = c(0, 117))
senators %>%
ggplot(aes(x = Congress_no)) +
geom_histogram(bins = 100) %>%
lims(Congress_no = c(0, 117))
senators %>%
ggplot(aes(x = Congress_no)) +
geom_histogram(bins = 100) %>%
lims(y = c(0, 100))
senators %>%
ggplot(aes(x = Congress_no)) +
geom_histogram(bins = 100) +
lims(y = c(0, 100))
senators %>%
ggplot(aes(x = Congress_no)) +
geom_histogram(bins = 100) +
lims(x = c(1, 117), y = c(0, 100))
senators %>%
ggplot(aes(x = Congress_no)) +
geom_histogram(bins = 100) +
lims(x = c(1, 117), y = c(0, 100), expand = FALSE)
senators %>%
ggplot(aes(x = Congress_no)) +
geom_histogram(bins = 100) +
coord_cartesian(ylim = c(0, 100),
xlim = c(1, 117),
clip = "off",
expand = FALSE)
senators %>%
ggplot(aes(x = Congress_no)) +
geom_histogram(bins = 100) +
coord_cartesian(ylim = c(0, 100),
xlim = c(1, 117),
clip = "off",
expand = FALSE) +
theme_minimal()
senators %>%
ggplot(aes(x = Congress_no)) +
geom_histogram(binwidth = 1) + # bins is
coord_cartesian(ylim = c(0, 100),
xlim = c(1, 117),
clip = "off",
expand = FALSE) +
theme_minimal()
set.seed(45789) # seed for random number generation
knitr::opts_chunk$set(cache.extra = knitr::rand_seed) # Discard cache when random seed changes
knitr::opts_chunk$set(cache.comments = FALSE) # ignore changes to comments
# Loading packages
library(papaja)
library(tidyverse)
library(ordinal)
library(patchwork)
library(magick)
library(emmeans)
library(egg)
library(scales)
library(buildmer)
library(lme4)
library(broom)
library(insight)
library(qwraps2)
library(kableExtra)
lazyload_cache_dir('position_magnitude_cache/latex')
r2_c
r2_c_emm <- emmeans(r2_c@model, ~ pos * ori)
r2_c_emm
r2_c_emm %>% summarise(mean = mean(emmeans()))
r2_c_emm %>% summarise(mean = mean(emmean)
)
r2_c_emm %>% tibble() %>% summarise(mean = mean(emmean))
r2_c_emm %>% as_tibble() %>% summarise(mean = mean(emmean))
r2_c_emm %>% as_tibble()
set.seed(45789) # seed for random number generation
knitr::opts_chunk$set(cache.extra = knitr::rand_seed) # Discard cache when random seed changes
knitr::opts_chunk$set(cache.comments = FALSE) # ignore changes to comments
# Loading packages
library(papaja)
library(tidyverse)
library(ordinal)
library(patchwork)
library(magick)
library(emmeans)
library(egg)
library(scales)
library(buildmer)
library(lme4)
library(broom)
library(insight)
library(qwraps2)
library(kableExtra)
risk1_anon <- read_csv("data/risk1_anon.csv")
risk2_anon <- read_csv("data/risk2_anon.csv")
risk3_anon <- read_csv("data/risk3_anon.csv")
wrangle <- function(anon_file) {
# extract literacy data
literacy <- anon_file %>%
filter(!is.na(q1_slider.response)) %>%
rowwise() %>%
mutate(literacy = mean(c(q1_slider.response,
q2_slider.response,
q3_slider.response,
q4_slider.response,
q5_slider.response))) %>%
select(participant,
literacy)
edu_labels <- set_names(c('No formal qualications',
'Secondary education (e.g. GED/GCSE)',
'High school diploma/A-levels',
'Technical/community college',
'Undergraduate degree (BA/BSc/other)',
'Graduate degree (MA/MSc/MPhil/other)',
'Doctorate degree (PhD/other)',
'Don\'t know / not applicable'),
seq(8,1,-1))
# extract demographics
demographics <- anon_file %>%
filter(!is.na(gender_slider.response)) %>%
mutate(gender_slider.response = recode(gender_slider.response,
`1` = "F",
`2` = "M",
`3` = "NB")) %>%
mutate(across(matches("edu_slider.response"),
~recode(edu_slider.response, !!!edu_labels))) %>%
select(matches(c("participant",
"age_textbox.text",
"gender_slider.response",
"edu_slider.response")))
anon_file %>%
select(matches(c("participant",
"item_no",
"condition",
"pos",
"orientation",
"chance_slider.response",
"severity_slider.response",
"chance_slider.rt",
"severity_slider.rt",
"data_mean",
"key_resp.rt",
"type",
"list_number",
"time_taken"))) %>%
filter(type == "E") %>%
inner_join(literacy, by = "participant") %>%
inner_join(demographics, by = "participant") %>%
mutate(across(matches(c("pos", "orientation", "condition", "list_number")), as_factor)) %>%
mutate(across(c("chance_slider.response",
"severity_slider.response"), as.ordered)) %>%
mutate(across(c("participant",
"item_no"), as.character)) %>%
mutate(time_taken = time_taken / 60) %>%
rename("ori"= matches("orientation")) %>%
assign(paste0(unique(anon_file$expName), "_tidy"),
value = ., envir = .GlobalEnv)
}
walk(list(risk1_anon,
risk2_anon,
risk3_anon),
wrangle)
contrasts(risk1_tidy$condition) <- matrix(c(.5, -.5))
contrasts(risk2_tidy$ori) <- matrix(c(.5, -.5))
contrasts(risk2_tidy$pos) <- matrix(c(.5, -.5))
contrasts(risk2_tidy$list_number) <- contr.sum(4)
contrasts(risk3_tidy$condition) <- matrix(c(.5, -.5))
risk1_tidy %>%
summarise(mean = mean(chance_slider.response),
sd = sd(chance_slider.response))
risk2_tidy$chance_slider.response <- as.numeric(risk2_tidy$chance_slider.response)
risk2_tidy %>%
summarise(mean = mean(chance_slider.response),
sd = sd(chance_slider.response))
risk1_tidy$chance_slider.response <- as.numeric(risk1_tidy$chance_slider.response)
risk1_tidy %>%
group_by(condition) %>%
summarise(mean = mean(chance_slider.response),
sd = sd(chance_slider.response))
risk3_tidy %>%
summarise(mean = mean(chance_slider.response),
sd = sd(chance_slider.response))
risk3_tidy$chance_slider.response <- as.numeric(risk3_tidy$chance_slider.response)
risk3_tidy %>%
summarise(mean = mean(chance_slider.response),
sd = sd(chance_slider.response))
1.41*0.75
1.32*0.75
1.32*0.75
install.packages("prismatic")
library(prismatic)
scale_colour_brewer(palette = "Set2")
RColorBrewer::brewer.pal(8, 'Set2')[1,2] %>% check_color_blindness()
library(tidyverse
)
RColorBrewer::brewer.pal(8, 'Set2')[1,2] %>% check_color_blindness()
RColorBrewer::brewer.pal(8, 'Set2')[1,2]
RColorBrewer::brewer.pal(8, 'Set2')[1] %>% check_color_blindness()
RColorBrewer::brewer.pal(8, 'Set2') %>% check_color_blindness()
palette.colors(palette = "Okabe-Ito")
palette.colors(palette = "Okabe-Ito")
palette.colors(palette = "Okabe-Ito")
palette.colors(palette = "Okabe-Ito")
palette.colors(palette = "Okabe-Ito")[2]
palette.colors(palette = "Okabe-Ito")[2][3]
RColorBrewer::brewer.pal(8, 'Set2')
RColorBrewer::brewer.pal(8, 'Paired')
display.brewer.all(colorblindFriendly=TRUE)
library(RColorBrewer)
display.brewer.all(colorblindFriendly=TRUE)
display.brewer.all(colorblindFriendly=TRUE)
palette.colors(palette = "Okabe-Ito")[1]
my_palette <- c(palette.colors(palette = "Okabe-Ito")[2],
palette.colors(palette = "Okabe-Ito")[3])
my_palette
df < tibble(x = c('a','b'), y = c(1,2))
df < as_tibble(x = c('a','b'), y = c(1,2))
df <- tibble(x = c('a','b'), y = c(1,2))
df %>%
ggplot(aes(x = x, y =y, colour = x)) %>%
geom_point()
df %>%
ggplot(aes(x = x, y =y, colour = x)) +
geom_point()
df %>%
ggplot(aes(x = x, y =y, colour = x)) +
geom_point() +
scale_colour_manual(labels = c('Conventional', 'Inverted'),
limits = c("a", "b"),
palette = "Dark2")
df %>%
ggplot(aes(x = x, y =y, colour = x)) +
geom_point() +
scale_colour_manual(labels = c('Conventional', 'Inverted'),
limits = c("a", "b"),
palette = my_palette)
my_palette <- c(palette.colors(palette = "Okabe-Ito")[2],
palette.colors(palette = "Okabe-Ito")[3])
df %>%
ggplot(aes(x = x, y =y, colour = x)) +
geom_point() +
scale_colour_manual(labels = c('Conventional', 'Inverted'),
limits = c("a", "b"),
palette = my_palette)
df %>%
ggplot(aes(x = x, y =y, colour = x)) +
geom_point() +
scale_fill_manual(labels = c('Conventional', 'Inverted'),
limits = c("a", "b"),
palette = my_palette)
df %>%
ggplot(aes(x = x, y =y, colour = x)) +
geom_point() +
scale_fill_manual(palette = my_palette)
df %>%
ggplot(aes(x = x, y =y, colour = x)) +
geom_point() +
scale_colour_manual(palette = my_palette)
df %>%
ggplot(aes(x = x, y =y, colour = x)) +
geom_point() +
scale_colour_manual(palette = my_palette)
my_palette <- c(palette.colors(palette = "Okabe-Ito")[2],
palette.colors(palette = "Okabe-Ito")[3]) %>% unname()
my_pall
my_palette
df %>%
ggplot(aes(x = x, y =y, colour = x)) +
geom_point() +
scale_colour_manual(palette = my_palette)
df %>%
ggplot(aes(x = x, y =y, colour = x)) +
geom_point() +
scale_colour_manual(values = my_palette)
palette.colors(palette = "Okabe-Ito")[2:3]
set.seed(45789) # seed for random number generation
knitr::opts_chunk$set(cache.extra = knitr::rand_seed) # Discard cache when random seed changes
knitr::opts_chunk$set(cache.comments = FALSE) # ignore changes to comments
# Loading packages
library(papaja)
library(tidyverse)
library(ordinal)
library(patchwork)
library(magick)
library(emmeans)
library(egg)
library(scales)
library(buildmer)
library(lme4)
library(broom)
library(insight)
library(qwraps2)
library(kableExtra)
my_palette <- unname(c(palette.colors(palette = "Okabe-Ito")[2:3]))
my_palette
sum(2,3)
set.seed(45789) # seed for random number generation
knitr::opts_chunk$set(cache.extra = knitr::rand_seed) # Discard cache when random seed changes
knitr::opts_chunk$set(cache.comments = FALSE) # ignore changes to comments
# Loading packages
library(papaja)
library(tidyverse)
library(ordinal)
library(patchwork)
library(magick)
library(emmeans)
library(egg)
library(scales)
library(buildmer)
library(lme4)
library(broom)
library(insight)
library(qwraps2)
library(kableExtra)
if (eval_models == FALSE){
print("h")
}
if (eval_models == FALSE){
print("h")
}
# in this script, computationally expensive models are cached
# choose whether to check the cache for during model evaluation, and load cached models automatically: eval_models <- TRUE (does not work in Docker)
# or turn off model evaluation and load the existing cache manually: eval_models <- FALSE (choose this option on Docker)
eval_models <- FALSE
if (eval_models == FALSE){
print("h")
}
lazyload_cache_dir('position_magnitude_cache/latex')
lazyload_cache_dir('position_magnitude_cache/latex')
lazyload_cache_dir('position_magnitude_cache/latex')
lazyload_cache_dir('position_magnitude_cache/latex')
r1-c
r1_c
library(qwraps2)
lazyload_cache_dir('position_magnitude_cache/latex')
r1_c
lazyload_cache_dir('position_magnitude_cache/latex')
lazyload_cache_dir('position_magnitude_cache/latex')
lazyload_cache_dir('position_magnitude_cache/latex')
library(qwraps2)
lazyload_cache_dir('position_magnitude_cache/latex')
r1_c
e <- 2
lazyload_cache_dir('position_magnitude_cache/latex')
getwd()
lazyload_cache_dir('/position_magnitude_cache/latex')
lazyload_cache_dir('position_magnitude_cache/latex')
lazyload_cache_dir('position_magnitude_cache/latex')
lazyload_cache_dir('position_magnitude_cache/latex', envir = parent.frame())
lazyload_cache_dir('/position_magnitude_cache/latex')
lazyload_cache_dir('position_magnitude_cache/latex')
install.packages("qwraps2")
install.packages("qwraps2")
library(qwraps2)
lazyload_cache_dir('position_magnitude_cache/latex')
lazyload_cache_dir('position_magnitude_cache/latex')
lazyload_cache_dir('position_magnitude_cache/latex')
lazyload_cache_dir('position_magnitude_cache/latex')
library(qwraps2)
lazyload_cache_dir('position_magnitude_cache/latex')
summary_extract <- function(model, key_term) {
if (class(model) == "buildmer") model <- model@model
params <- c("statistic", "p.value")
model_name <- deparse(substitute(model))
# get the row for the chosen fixed effect term
one_row <- tidy(model) %>% filter(term == key_term)
get_cols <- function(param) {
assign(value = one_row %>% pull(param),
envir = .GlobalEnv,
paste0(model_name, ".", param))
}
lapply(params, get_cols)
}
summary_extract(r1_c@model, "condition1")
library(tidyverse)
summary_extract <- function(model, key_term) {
if (class(model) == "buildmer") model <- model@model
params <- c("statistic", "p.value")
model_name <- deparse(substitute(model))
# get the row for the chosen fixed effect term
one_row <- tidy(model) %>% filter(term == key_term)
get_cols <- function(param) {
assign(value = one_row %>% pull(param),
envir = .GlobalEnv,
paste0(model_name, ".", param))
}
lapply(params, get_cols)
}
summary_extract(r1_c@model, "condition1")
library(broom)
summary_extract <- function(model, key_term) {
if (class(model) == "buildmer") model <- model@model
params <- c("statistic", "p.value")
model_name <- deparse(substitute(model))
# get the row for the chosen fixed effect term
one_row <- tidy(model) %>% filter(term == key_term)
get_cols <- function(param) {
assign(value = one_row %>% pull(param),
envir = .GlobalEnv,
paste0(model_name, ".", param))
}
lapply(params, get_cols)
}
summary_extract(r1_c@model, "condition1")
summary_extract(r1_c, "condition1")
summary_extract(r1_c@model, "condition1")
summary_extract <- function(model, key_term) {
if (class(model) == "buildmer") model_n <- model@model
params <- c("statistic", "p.value")
model_name <- deparse(substitute(model))
# get the row for the chosen fixed effect term
one_row <- tidy(model) %>% filter(term == key_term)
get_cols <- function(param) {
assign(value = one_row %>% pull(param),
envir = .GlobalEnv,
paste0(model_name, ".", param))
}
lapply(params, get_cols)
}
summary_extract(r1_c@model, "condition1")
r1_c@p
summary_extract <- function(model, key_term) {
params <- c("statistic", "p.value")
model_name <- deparse(substitute(model))
if (class(model) == "buildmer") model <- model@model
# get the row for the chosen fixed effect term
one_row <- tidy(model) %>% filter(term == key_term)
get_cols <- function(param) {
assign(value = one_row %>% pull(param),
envir = .GlobalEnv,
paste0(model_name, ".", param))
}
lapply(params, get_cols)
}
summary_extract(r1_c, "condition1")
summary_extract(r1_cl, "condition1")
lazyload_cache_dir('position_magnitude_cache/latex')
lazyload_cache_dir('position_magnitude_cache/latex')
lazyload_cache_dir('position_magnitude_cache/latex')
