'Graduate degree (MA/MSc/MPhil/other)',
'Doctorate degree (PhD/other)',
'Don\'t know / not applicable'),
seq(8,1,-1))
# extract demographics
demographics <- anon_file %>%
filter(!is.na(gender_slider.response)) %>%
mutate(gender_slider.response = recode(gender_slider.response,
`1` = "F",
`2` = "M",
`3` = "NB")) %>%
mutate(across(matches("edu_slider.response"),
~recode(edu_slider.response, !!!edu_labels))) %>%
mutate(across(matches("edu_slider.response"), as.ordered)) %>%
mutate(across(reorder(matches("edu_slider.response"), X = edu_labels))) %>%
select(matches(c("participant",
"age_textbox.text",
"gender_slider.response",
"edu_slider.response")))
anon_file %>%
select(matches(c("participant",
"item_no",
"condition",
"pos",
"orientation",
"chance_slider.response",
"severity_slider.response",
"chance_slider.rt",
"severity_slider.rt",
"data_mean",
"key_resp.rt",
"type"))) %>%
filter(type == "E") %>%
inner_join(literacy, by = "participant") %>%
inner_join(demographics, by = "participant") %>%
mutate(across(matches(c("pos", "orientation", "condition")), as_factor)) %>%
mutate(across(c("chance_slider.response",
"severity_slider.response"), as.ordered)) %>%
mutate(across(c("participant",
"item_no"), as.character)) %>%
rename("ori"= matches("orientation")) %>%
assign(paste0(unique(anon_file$expName), "_tidy"),
value = ., envir = .GlobalEnv)
}
walk(list(risk1_anon,
risk2_anon,
risk3_anon),
wrangle)
edu_labels
edu_labels <- set_names(c('No formal qualications',
'Secondary education (e.g. GED/GCSE)',
'High school diploma/A-levels',
'Technical/community college',
'Undergraduate degree (BA/BSc/other)',
'Graduate degree (MA/MSc/MPhil/other)',
'Doctorate degree (PhD/other)',
'Don\'t know / not applicable'),
seq(8,1,-1))
edu_labels
!!!edu_labels
unname(edu_labels)
wrangle <- function(anon_file) {
# extract literacy data
literacy <- anon_file %>%
filter(!is.na(q1_slider.response)) %>%
rowwise() %>%
mutate(literacy = mean(c(q1_slider.response,
q2_slider.response,
q3_slider.response,
q4_slider.response,
q5_slider.response))) %>%
select(participant,
literacy)
edu_labels <- set_names(c('No formal qualications',
'Secondary education (e.g. GED/GCSE)',
'High school diploma/A-levels',
'Technical/community college',
'Undergraduate degree (BA/BSc/other)',
'Graduate degree (MA/MSc/MPhil/other)',
'Doctorate degree (PhD/other)',
'Don\'t know / not applicable'),
seq(8,1,-1))
# extract demographics
demographics <- anon_file %>%
filter(!is.na(gender_slider.response)) %>%
mutate(gender_slider.response = recode(gender_slider.response,
`1` = "F",
`2` = "M",
`3` = "NB")) %>%
mutate(across(matches("edu_slider.response"),
~recode(edu_slider.response, !!!edu_labels))) %>%
select(matches(c("participant",
"age_textbox.text",
"gender_slider.response",
"edu_slider.response")))
anon_file %>%
select(matches(c("participant",
"item_no",
"condition",
"pos",
"orientation",
"chance_slider.response",
"severity_slider.response",
"chance_slider.rt",
"severity_slider.rt",
"data_mean",
"key_resp.rt",
"type"))) %>%
filter(type == "E") %>%
inner_join(literacy, by = "participant") %>%
inner_join(demographics, by = "participant") %>%
mutate(across(matches(c("pos", "orientation", "condition")), as_factor)) %>%
mutate(across(c("chance_slider.response",
"severity_slider.response"), as.ordered)) %>%
mutate(across(c("participant",
"item_no"), as.character)) %>%
rename("ori"= matches("orientation")) %>%
assign(paste0(unique(anon_file$expName), "_tidy"),
value = ., envir = .GlobalEnv)
}
walk(list(risk1_anon,
risk2_anon,
risk3_anon),
wrangle)
contrasts(risk1_tidy$condition) <- matrix(c(.5, -.5))
contrasts(risk2_tidy$ori) <- matrix(c(.5, -.5))
contrasts(risk2_tidy$pos) <- matrix(c(.5, -.5))
contrasts(risk3_tidy$condition) <- matrix(c(.5, -.5))
risk3_anon %>% filter(edu_slider.response == 'No formal qualications' |
'Don\'t know / not applicable')
risk3_anon %>% filter(edu_slider.response == 'No formal qualications' | edu_slider.response ==
'Don\'t know / not applicable')
risk3_anon %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response !=
'Don\'t know / not applicable')
risk3_anon %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response !=
'Don\'t know / not applicable') %>% summarise(n())
risk3_anon %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response !=
'Don\'t know / not applicable') %>% summarise(n = n()
)
risk3_anon %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response !=
'Don\'t know / not applicable') %>% summarise(tally())
risk3_anon %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response !=
'Don\'t know / not applicable') %>% summarise(count())
risk3_anon %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response != 'Don\'t know / not applicable') %>% summarise(perc = n()/nrow(.)*100)
risk3_anon %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response != 'Don\'t know / not applicable') %>% summarise(perc = n()/nrow(.)*100)
risk3_anon %>% group_by(edu_slider.response) %>% summarise(perc = n()/nrow(.)*100)
View(risk3_anon)
View(risk3_tidy)
risk3_tidy %>% group_by(edu_slider.response) %>% summarise(perc = n()/nrow(.)*100)
risk3_tidy %>% group_by(edu_slider.response) %>% summarise(perc = n()/nrow(.)*100) %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response != 'Don\'t know / not applicable')
risk3_tidy %>% group_by(edu_slider.response) %>% summarise(perc = n()/nrow(.)*100) %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response != 'Don\'t know / not applicable') %>% pull(perc)
risk3_tidy %>% group_by(edu_slider.response) %>% summarise(perc = n()/nrow(.)*100) %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response != 'Don\'t know / not applicable') %>% pull(perc) %>% sum()
risk2_tidy %>% group_by(edu_slider.response) %>% summarise(perc = n()/nrow(.)*100) %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response != 'Don\'t know / not applicable') %>% pull(perc) %>% sum()
risk2_tidy %>% group_by(edu_slider.response) %>% summarise(perc = n()/nrow(.)*100)
risk2_tidy %>% group_by(edu_slider.response) %>% summarise(perc = n()/nrow(.)*100) %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response != 'Don\'t know / not applicable') %>% sum(perc)
risk2_tidy %>% group_by(edu_slider.response) %>% summarise(perc = n()/nrow(.)*100) %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response != 'Don\'t know / not applicable') %>% sum("perc")
risk2_tidy %>% group_by(edu_slider.response) %>% summarise(perc = n()/nrow(.)*100) %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response != 'Don\'t know / not applicable') %>% pull(perc) %>% sum()
distinct(risk3_tidy, participant, .keep_all = TRUE) %>% group_by(edu_slider.response) %>% summarise(perc = n()/nrow(.)*100) %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response != 'Don\'t know / not applicable') %>% pull(perc) %>% sum()
distinct(risk3_tidy, participant, .keep_all = TRUE) %>% group_by(edu_slider.response)
distinct(risk3_tidy, participant, .keep_all = TRUE) %>% group_by(edu_slider.response) %>% summarise(perc = n()/nrow(.)*100)
distinct(risk3_tidy, participant, .keep_all = TRUE) %>% group_by(edu_slider.response) %>% summarise(perc = n())
distinct(risk3_tidy, participant, .keep_all = TRUE) %>% group_by(edu_slider.response) %>% summarise(perc = n()) %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response != 'Don\'t know / not applicable') %>% pull(perc) %>% sum()
distinct(risk3_tidy, participant, .keep_all = TRUE) %>% group_by(edu_slider.response) %>% summarise(perc = n()/nrow(.)*100) %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response != 'Don\'t know / not applicable') %>% pull(perc) %>% sum()
edu_r2 <- distinct(risk2_tidy, participant, .keep_all = TRUE) %>% group_by(edu_slider.response) %>% summarise(perc = n()/nrow(.)*100) %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response != 'Don\'t know / not applicable') %>% pull(perc) %>% sum()
edu2
edu_r2 <- distinct(risk2_tidy, participant, .keep_all = TRUE) %>% group_by(edu_slider.response) %>% summarise(perc = n()/nrow(.)*100) %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response != 'Don\'t know / not applicable') %>% pull(perc) %>% sum()
edu_2
edu_r2
edu_r2 <- distinct(risk2_tidy, participant, .keep_all = TRUE) %>% group_by(edu_slider.response) %>% summarise(perc = n()/nrow(.)*100) %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response != 'Don\'t know / not applicable') %>% total(perc)
distinct(risk2_tidy, participant, .keep_all = TRUE) %>% group_by(edu_slider.response) %>% summarise(perc = n()/nrow(.)*100) %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response != 'Don\'t know / not applicable') %>% total(perc)
distinct(risk2_tidy, participant, .keep_all = TRUE) %>% group_by(edu_slider.response) %>% summarise(perc = n()/nrow(.)*100) %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response != 'Don\'t know / not applicable') %>% total(perc)
edu_r2 <- distinct(risk2_tidy, participant, .keep_all = TRUE) %>% group_by(edu_slider.response) %>% summarise(perc = n()/nrow(.)*100) %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response != 'Don\'t know / not applicable') %>% count(perc)
edu_r2
edu_r2 <- distinct(risk2_tidy, participant, .keep_all = TRUE) %>% group_by(edu_slider.response) %>% summarise(perc = n()/nrow(.)*100) %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response != 'Don\'t know / not applicable') %>% tally(perc)
edu_r2
edu_r2$n
edu_r2 <- distinct(risk2_tidy, participant, .keep_all = TRUE) %>% group_by(edu_slider.response) %>% summarise(perc = n()) %>% filter(edu_slider.response != 'No formal qualications' & edu_slider.response != 'Don\'t know / not applicable') %>% tally(perc)
edu_r2$n
version('knitr')
install.packages("knitr")
install.packages("knitr")
bookdown::word_document2()
bookdown:::word_document2
bookdown::word_document2
citation
citation()
version
verision$version.string
version$version.string
version(ordinal)
cite(ordinal)
citation(ordinal)
citation('ordinal')
citation('buildmer')
library(qwraps2)
lazyload_cache_dir('cache')
summary(r1_p@model)
emmeans(r1_p@model)
library(emmeans)
emmeans(r1_p@model)
summary(r1_p@model)
emmeans(r2_p@model)
r2_p_emm <- emmeans(r2_p@model, ~ pos * ori)
r2_p_emm
set.seed(45789) # seed for random number generation
knitr::opts_chunk$set(cache.extra = knitr::rand_seed) # Discard cache when random seed changes
knitr::opts_chunk$set(cache.comments = FALSE) # ignore changes to comments
# Loading packages
library(papaja)
library(tidyverse)
library(ordinal)
library(patchwork)
library(magick)
library(emmeans)
library(egg)
library(scales)
library(buildmer)
library(lme4)
library(broom)
r2_p_emm %>%
as_tibble() %>%
mutate_at(vars("emmean":"asymp.UCL"), as.numeric) %>%
ggplot(aes(x = pos, y = emmean, colour = ori)) +
geom_linerange(aes(ymin = asymp.LCL, ymax = asymp.UCL),
position = position_dodge(width = 0.2),
size = 3, alpha = 0.5) +
geom_point(position = position_dodge(width = 0.2), size = 3) +
geom_line(aes(group = ori),
position = position_dodge(width = 0.2),
size = 2) +
lims(y = c(-1.65, 2)) +
labs(y = "Est. Marginal Mean",
x = "Physical Position",
colour = "Orientation") +
scale_x_discrete(labels = c('Low','High'),
limits = c("lo", "hi")) +
scale_colour_brewer(labels = c('Conventional', 'Inverted'),
limits = c("conventional", "inverted"),
palette = "Set2") +
theme_minimal() +
theme(legend.position = "top")
r3_p_emm <- emmeans(r3_p@model, ~ condition) %>% as_tibble()
r3_p_emm
r3_p_emm <- emmeans(r3_p@model, ~ condition) %>% as_tibble()
r3_p_emm.h <- r3_p_emm %>% filter(condition == "hi") %>% pull(emmean)
r3_p_emm.l <- r3_p_emm %>% filter(condition == "lo") %>% pull(emmean)
r3_p_emm.LCL <- r3_p_emm %>% filter(condition == "hi") %>% pull(asymp.LCL)
r3_p_emm.UCL <- r3_p_emm %>% filter(condition == "hi") %>% pull(asymp.UCL)
r3_p_emm %>%
as_tibble() %>%
mutate_at(vars("emmean":"asymp.UCL"), as.numeric) %>%
ggplot(aes(x = condition, y = emmean, colour = condition)) +
geom_linerange(aes(ymin = asymp.LCL, ymax = asymp.UCL),
position = position_dodge(width = 0.2),
size = 3, alpha = 0.5) +
geom_point(position = position_dodge(width = 0.2), size = 3) +
geom_line(aes(group = ori),
position = position_dodge(width = 0.2),
size = 2) +
lims(y = c(-1.65, 2)) +
labs(y = "Est. Marginal Mean",
x = "Physical Position",
colour = "Orientation") +
scale_x_discrete(labels = c('Low','High'),
limits = c("lo", "hi")) +
scale_colour_brewer(labels = c('Conventional', 'Inverted'),
limits = c("conventional", "inverted"),
palette = "Set2") +
theme_minimal() +
theme(legend.position = "top")
r3_p_emm %>%
as_tibble() %>%
mutate_at(vars("emmean":"asymp.UCL"), as.numeric) %>%
ggplot(aes(x = condition, y = emmean, colour = condition)) +
geom_linerange(aes(ymin = asymp.LCL, ymax = asymp.UCL),
position = position_dodge(width = 0.2),
size = 3, alpha = 0.5) +
geom_point(position = position_dodge(width = 0.2), size = 3) +
geom_line(aes(group = condition),
position = position_dodge(width = 0.2),
size = 2) +
lims(y = c(-1.65, 2)) +
labs(y = "Est. Marginal Mean",
x = "Physical Position",
colour = "Orientation") +
scale_x_discrete(labels = c('Low','High'),
limits = c("lo", "hi")) +
scale_colour_brewer(labels = c('Conventional', 'Inverted'),
limits = c("conventional", "inverted"),
palette = "Set2") +
theme_minimal() +
theme(legend.position = "top")
r3_p_emm %>%
as_tibble() %>%
mutate_at(vars("emmean":"asymp.UCL"), as.numeric) %>%
ggplot(aes(x = condition, y = emmean, colour = condition)) +
geom_linerange(aes(ymin = asymp.LCL, ymax = asymp.UCL),
position = position_dodge(width = 0.2),
size = 3, alpha = 0.5) +
geom_point(position = position_dodge(width = 0.2), size = 3) +
geom_line(aes(group = condition),
position = position_dodge(width = 0.2),
size = 2) +
#lims(y = c(-1.65, 2)) +
labs(y = "Est. Marginal Mean",
x = "Physical Position",
colour = "Orientation") +
scale_x_discrete(labels = c('Low','High'),
limits = c("lo", "hi")) +
scale_colour_brewer(labels = c('Conventional', 'Inverted'),
limits = c("conventional", "inverted"),
palette = "Set2") +
theme_minimal() +
theme(legend.position = "top")
r3_p_emm %>%
as_tibble() %>%
mutate_at(vars("emmean":"asymp.UCL"), as.numeric) %>%
ggplot(aes(x = condition, y = emmean, colour = condition)) +
geom_linerange(aes(ymin = asymp.LCL, ymax = asymp.UCL),
position = position_dodge(width = 0.2),
size = 3, alpha = 0.5)
r3_p_emm %>%
as_tibble() %>%
mutate_at(vars("emmean":"asymp.UCL"), as.numeric) %>%
ggplot(aes(x = condition, y = emmean, colour = condition)) +
geom_linerange(aes(ymin = asymp.LCL, ymax = asymp.UCL),
position = position_dodge(width = 0.2),
size = 3, alpha = 0.5) +
geom_point(position = position_dodge(width = 0.2), size = 3) +
geom_line(aes(group = condition),
position = position_dodge(width = 0.2),
size = 2)
cite('knitr')
citation("knitr")
library(qwraps2)
lazyload_cache_dir('/Users/db/Documents/ANALYSIS/risk/paper1/position_magnitude/position_magnitude_cache/latex')
formula(r1_c)
findbars(r1_c)
library(lme4)
findbars(r1_c)
findbars(formula(r1_c))
onlyBars <- function(form) {
reformulate(
sapply(
findbars(form), # list of charcater vector for each random effect
function(x)  parens(deparse(x))), # put each character vector in brackets
response = form[[2]])
}
onlyBars(formula(r1_c))
parens <- function(x) {paste0("(",x,")")}
onlyBars <- function(form) {
reformulate(
sapply(
findbars(form), # list of charcater vector for each random effect
function(x)  parens(deparse(x))), # put each character vector in brackets
response = form[[2]])
}
findbars(formula(r1_c))
onlyBars(formula(r1_c))
findbars(formula(r1_c))
cc<- findbars(formula(r1_c))
cc[11]
cc[[1]]
length(cc[[1]])
library(report)
report_random(r1_c)
report_random(formula(r1_c))
report_random(formula(r1_c@model))
myform <- formula(r1_c@model)
myform
class(myform)
report_random(myform)
xxx <- lm(myform)
model <- lme4::lmer(Sepal.Length ~ Petal.Length + (1 | Species), data = iris)
r <- report_random(model)
r
summary(r)
model <- lme4::lmer(Sepal.Length ~ Petal.Length + (1 + Petal.Length | Species), data = iris)
r <- report_random(model)
r
model <- lme4::lmer(Sepal.Length ~ Petal.Length + (Petal.Length | Species), data = iris)
r <- report_random(model)
r
model
r
summary(r)
report_parameters(model)
report_model(model)
iris
model <- lme4::lmer(Sepal.Length ~ Petal.Length + (1 + Petal.Length | Species) + (1 | Petal.Width), data = iris)
r <- report_random(model)
r
report_random
report:::report_random
report:::report_random
UseMethod("report_random")
report_random()
report_random
library(insight)
find_terms(model)
findbars
insight::find_random_slopes(modle)
insight::find_random_slopes(model)
find_random(model, flatten = TRUE)
find_random(model, flatten = FALSE)
find_random(model, split_nested = FALSE)
find_random(model, split_nested = TRUE)
model <- lme4::lmer(Sepal.Length ~ Petal.Length + (1 + Petal.Length | Species) + (1 | Petal.Width), data = iris)
find_random(model, split_nested = TRUE)
find_random(model)
model <- lme4::lmer(Sepal.Length ~ Petal.Length + (1 + Sepal.Width | Species) + (1 | Petal.Width), data = iris)
r <- report_random(model)
find_random(model, split_nested = TRUE)
find_random(model)
find_random_slopes(model)
find_random(model)
find_random_slopes(model)
find_terms(model)
?find_terms
find_random_slopes
extract_random_slopes
.extract_random_slopes
find_formula(model)
find_formula(model)$random[[1]]
find_formula(model)$random[[1]][3]
find_formula(model)$random[[1]][2]
find_formula(model)$random[[1]][1]
find_formula(model)$random[[1]]
dd <- find_formula(model)$random[[1]]
dd
dd[2]
dd[3]
dd[[1]]
dd[[2]]
dd[[3]]
dd[[2]]
dd[[2]][1]
dd[[2]][2]
dd[[2]][3]
parens <- function(x) {paste0("(",x,")")}
onlyBars <- function(form) {
onlyBars <- function(form) {
reformulate(
sapply(
findbars(form), # list of charcater vector for each random effect
function(x)  parens(deparse(x))), # put each character vector in brackets
response = form[[2]]) }
onlyBars(model)
onlyBars(formula(model))
dd <- find_formula(model)$random[[1]]
dd[[2]][3]
dd[[2]][4]
dd[[2]][5]
dd[[2]][3]
dd$1
dd$model
dd[[1]]
dd[[1]]
dd[[3]]
dd[[2]]
cc <- dd[[2]]
cc
cc[[3]]
dd[[2]][[3]]
dd <- find_formula(model)$random[[1]]
dd[[2]][[3]]
dd[[2]][[4]]
dd[[2]][[4]]
length(dd[[2]])
dd <- find_formula(model)$random[[1]][[2]]
dd[[length(dd)]]
find_formula(model)$random[[2]]
find_random(model)
find_random_slopes(model)
format_text
insight:::format_number(9)
insight:::format.insight_formula(model)
insight:::format.insight_formula(formula(model))
insight:::format_formula(model, "random")
insight::format_formula(model, "random")
format_formula(model, "random")
"The model included random intercepts for " find_random(model)
tibble(find_random(model))
library(tidyverse)
tibble(find_random(model))
tibble(unlist(find_random(model)))
tibble(terms = unlist(find_random(model)))
"plus by-" find_random_slopes(model) "slopes for"
find_random_slopes(model)
dd <- find_formula(model)$random[[1]][[2]]
dd[[length(dd)]]
dd <- find_formula(model)$random[[1]][[2]][[length(.)]]
dd <- find_formula(model)$random[[1]][[2]]
dd[[length(dd)]]
find_formula(model)$random
find_formula(model)$random[[1]][[2]]
find_formula(model)$random[[1]]
find_formula(model)$random[[1]][[1]]
find_formula(model)$random[[1]][[3]]
tibble(terms = unlist(find_random(model)))
citeNatbib()
?citeNatbib
rref <- bibentry(
bibtype = "Manual",
title = "R: A Language and Environment for Statistical Computing",
author = person("R Core Team"),
organization = "R Foundation for Statistical Computing",
address = "Vienna, Austria",
year = 2013,
url = "https://www.R-project.org/",
key = "R")
cite(rref)
