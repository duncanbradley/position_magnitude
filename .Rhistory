one_row <- tidy(model) %>% filter(term == key_term)
print(one_row)
# get_cols <- function(param) {
#
#   assign(value = one_row %>% pull(param),
#         envir = .GlobalEnv,
#         paste0(deparse(substitute(model)),
#                ".",
#                 param))
#
# }
#
# lapply(params, get_cols)
}
summary_extract(r1_pl, "condition1")
summary_extract <- function(model, key_term){
params <- c("statistic", "p.value")
one_row <- tidy(model) %>% filter(term == key_term)
get_cols <- function(param) {
assign(value = one_row %>% pull(param),
envir = .GlobalEnv,
paste0(deparse(substitute(model)),
".",
param))
}
lapply(params, get_cols)
}
summary_extract(r1_pl, "condition1")
summary_extract <- function(model, key_term){
params <- c("statistic", "p.value")
one_row <- tidy(model) %>% filter(term == key_term)
get_cols <- function(param) {
assign(value = one_row %>% pull(param),
envir = .GlobalEnv,
paste0(deparse(substitute(model)),
".",
param))
}
print(one_row %>% pull(param))
lapply(params, get_cols)
}
summary_extract(r1_pl, "condition1")
summary_extract <- function(model, key_term){
params <- c("statistic", "p.value")
one_row <- tidy(model) %>% filter(term == key_term)
get_cols <- function(param) {
assign(value = one_row %>% pull(param),
envir = .GlobalEnv,
paste0(deparse(substitute(model)),
".",
param))
}
lapply(params, get_cols)
print(paste0(deparse(substitute(model))))
}
summary_extract(r1_pl, "condition1")
summary_extract <- function(model, key_term){
params <- c("statistic", "p.value")
one_row <- tidy(model) %>% filter(term == key_term)
get_cols <- function(param) {
assign(value = one_row %>% pull(param),
envir = .GlobalEnv,
paste0(deparse(substitute(model)),
".",
param))
}
lapply(params, get_cols)
}
summary_extract(r1_pl, "condition1")
summary_extract <- function(model, key_term){
params <- c("statistic", "p.value")
one_row <- tidy(model) %>% filter(term == key_term)
get_cols <- function(param) {
assign(value = one_row %>% pull(param),
envir = .GlobalEnv,
paste0(deparse(substitute(model)),
".",
param))
}
lapply(params, get_cols)
}
summary_extract(r1_pl, "condition1")
model.p.value
summary_extract <- function(model, key_term){
params <- c("statistic", "p.value")
one_row <- tidy(model) %>% filter(term == key_term)
get_cols <- function(param) {
assign(value = one_row %>% pull(param),
envir = .GlobalEnv,
paste0(model,
".",
param))
}
lapply(params, get_cols)
}
summary_extract(r1_pl, "condition1")
paste0(r1_pl)
r1_p$name
r1_pl$call
View(r1_pl)
summary_extract <- function(model, key_term){
params <- c("statistic", "p.value")
model_name <- deparse(substitute(model))
one_row <- tidy(model) %>% filter(term == key_term)
get_cols <- function(param) {
assign(value = one_row %>% pull(param),
envir = .GlobalEnv,
paste0(model_name,
".",
param))
}
lapply(params, get_cols)
}
summary_extract(r1_pl, "condition1")
r1_pl.statistic
r1_pl.p.value
summary_extract(r2_pl, "pos1:ori1")
r2_pl.statistic
lapply(params, get_cols)
get_cols <- function(param) {
assign(value = one_row %>% pull(param),
envir = .GlobalEnv,
paste0(model_name,
".",
param))
}
lapply(params, get_cols)
summary_extract <- function(model, key_term) {
params <- c("statistic", "p.value")
model_name <- deparse(substitute(model))
one_row <- tidy(model) %>% filter(term == key_term)
get_cols <- function(param) {
assign(value = one_row %>% pull(param),
envir = .GlobalEnv,
paste0(model_name,
".",
param))
}
lapply(params, get_cols)
}
params <- c("statistic", "p.value")
model_name <- deparse(substitute(model))
one_row <- tidy(model) %>% filter(term == key_term)
get_cols <- function(param) {
assign(value = one_row %>% pull(param),
envir = .GlobalEnv,
paste0(model_name,
".",
param))
}
lapply(params, get_cols)
summary_extract <- function(model, key_term) {
params <- c("statistic", "p.value")
model_name <- deparse(substitute(model))
one_row <- tidy(model) %>% filter(term == key_term)
get_cols <- function(param) {
assign(value = one_row %>% pull(param),
envir = .GlobalEnv,
paste0(model_name,
".",
param))
}
lapply(params, get_cols)
}
summary_extract(r2_pl, "pos1:ori1")
summary_extract <- function(model, key_term) {
params <- c("statistic", "p.value")
model_name <- deparse(substitute(model))
one_row <- tidy(model) %>% filter(term == key_term)
get_cols <- function(param) {
assign(value = one_row %>% pull(param),
envir = .GlobalEnv,
paste0(model_name, ".", param))
}
lapply(params, get_cols)
}
summary_extract(r2_pl, "pos1:ori1")
?lapply
library(qwraps2)
library(broom)
lazyload_cache_dir('paper1_cache/html')
r1_pl %>% as_tibble()
library(tidyverse)
r1_pl %>% as_tibble()
r1_pl$coefficients, %>% as_tibble()
r1_pl$coefficients %>% as_tibble()
tibble()
as_tibble()
lazyload_cache_dir('paper1_cache/html')
summary_extract(r3_pl, "condition1")
summary(r3_pl)
summary(r3_pl)$coefficients
summary(r3_pl)
tidy(r3_pl)
tidy(r2_pl)
# Seed for random number generation
set.seed(45789)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
# Loading packages
library(papaja)
library(tidyverse)
library(zoo)
library(wesanderson)
library(ordinal)
library(patchwork)
library(magick)
library(emmeans)
library(egg)
library(scales)
library(buildmer)
library(lme4)
library(broom)
summary_extract <- function(model, key_term) {
params <- c("statistic", "p.value")
model_name <- deparse(substitute(model))
one_row <- tidy(model) %>% filter(term == key_term)
get_cols <- function(param) {
assign(value = one_row %>% pull(param),
envir = .GlobalEnv,
paste0(model_name, ".", param))
}
lapply(params, get_cols)
}
summary_extract(r2_pl, "pos1:ori1")
summary_extract(r1_pl, "condition1")
summary_extract(r2_pl, "condition1")
summary_extract(r2_pl, "pos1:ori1")
r2_pl.statistic
r2_pl.p.value
r2_pl.p.value
# Seed for random number generation
set.seed(45789)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
# Loading packages
library(papaja)
library(tidyverse)
library(zoo)
library(wesanderson)
library(ordinal)
library(patchwork)
library(magick)
library(emmeans)
library(egg)
library(scales)
library(buildmer)
library(lme4)
library(broom)
summary_extract <- function(model, key_term) {
params <- c("statistic", "p.value")
model_name <- deparse(substitute(model))
one_row <- tidy(model) %>% filter(term == key_term)
get_cols <- function(param) {
assign(value = one_row %>% pull(param),
envir = .GlobalEnv,
paste0(model_name, ".", param))
}
lapply(params, get_cols)
}
library(qwraps2)
lazyload_cache_dir('paper1_cache/html')
r2_sl
tidy(r2_sl)
summary_extract(r2_sl)
summary_extract(r2_sl, "pos1:ori1")
tidy(r2_sl) %>% filter(term == "pos1:ori1")
tidy(r2_sl)
tibble(x,y,z)
x <- c(1,2,3)
y <- c(4,5,6)
z <- c(7,8,9)
tibble(x,y,z)
x <- c(1,2,3)
y <- c(4,5,6)
z <- c(7,8,9)
a <- tibble(x,y,z)
p <- c(11,22,33)
q <- c(44,55,66)
b <- tibble(p,q)
a %>% select(x:y) %>% cbind(b)
a %>% select(x:y) %>% rbind(b)
a %>% slice_head(1)
?slice_head
a %>% slice_head(n = 1)
a %>% slice(1:2) %>%
a %>% slice(1:2) %>% rbind(b)
x <- c(11,22,33)
y <- c(44,55,66)
b <- tibble(x, y)
a %>% slice(1:2) %>% rbind(b)
z <- c(77,88,99)
b <- tibble(x,y,z)
a %>% slice(1:2) %>% rbind(b)
a %>% slice(1:2)
x <- c(1,2,3)
y <- c(4,5,6)
z <- c(7,8,9)
a <- tibble(x,y,z)
x <- c(11,22,33)
y <- c(44,55,66)
z <- c(77,88,99)
b <- tibble(x,y,z)
a %>% slice(1:2)
a %>% slice(1)
a <- tibble(x,y,z)
slice(a, 1)
slice(a, 1L)
a %>% slice(1L)
type(a)
class(a)
a <- tibble(x,y,z)
View(a)
a %>% slice()
slice(starwars, 1)
mtcars %>% slice(1L)
?slice
slice <- dplyr::slice()
slice <- tidyverse::slice()
slice <- dplyr::slice
slice()
slice(mtcars, 1)
a %>% slice(1L)
a %>% slice(1:3)
a %>% slice(1:2)
rbind(slice(a, 1:2), b)
a
x <- c(1,2,3)
y <- c(4,5,6)
z <- c(7,8,9)
a <- tibble(x,y,z)
x <- c(11,22,33)
y <- c(44,55,66)
z <- c(77,88,99)
b <- tibble(x,y,z)
rbind(slice(a, 1:2), b)
rbind(slice(a, 1:2), b)
0 *60 + 1
1 *60 + 1
1+19
1+59
?write_csv
create_lists <- function(n) {
start_no <- (n-1)*60 + 1
stop_no <- start_no + 59
print(start_no)
print(stop_no)
}
lapply(1:12, create_list)
lapply(1:12, create_lists)
create_lists <- function(n) {
start_no <- (n-1)*60 + 1
stop_no <- start_no + 59
paste0("start", start_no)
paste0("stop", stop_no)
}
lapply(1:12, create_lists)
create_lists <- function(n) {
start_no <- (n-1)*60 + 1
stop_no <- start_no + 59
print(paste0("start", start_no))
print(paste0("stop", stop_no))
}
lapply(1:12, create_lists)
lapply(1:12, create_lists)
lapply(1:12, create_lists)
?write_csv
?lapply
?walk
experimental <- "experimental.csv"
fillers <- "fillers_practice.csv"
create_lists <- function(n) {
start_no <- (n-1)*60 + 1
stop_no <- start_no + 59
write_csv(x = rbind(slice(experimental, start_no:stop_no), fillers_practice),
file = paste0("list", n, ".csv"))
}
map(1:12, create_lists)
create_lists <- function(n) {
start_no <- (n-1)*60 + 1
stop_no <- start_no + 59
print(class(start_no))
}
map(1:12, create_lists)
create_lists <- function(n) {
start_no <- (n-1)*60 + 1
stop_no <- start_no + 59
print(class(start_no))
}
map(1:12, create_lists)
experimental <- read_csv("experimental.csv")
fillers <- read_csv("fillers_practice.csv")
create_lists <- function(n) {
start_no <- (n-1)*60 + 1
stop_no <- start_no + 59
print(class(start_no))
}
create_lists <- function(n) {
start_no <- (n-1)*60 + 1
stop_no <- start_no + 59
print(class(start_no))
write_csv(x = rbind(slice(experimental, start_no:stop_no), fillers_practice),
file = paste0("list", n, ".csv"))
}
map(1:12, create_lists)
fillers_ractice <- read_csv("fillers_practice.csv")
create_lists <- function(n) {
start_no <- (n-1)*60 + 1
stop_no <- start_no + 59
print(class(start_no))
write_csv(x = rbind(slice(experimental, start_no:stop_no), fillers_practice),
file = paste0("list", n, ".csv"))
}
map(1:12, create_lists)
fillers_practice <- read_csv("fillers_practice.csv")
create_lists <- function(n) {
start_no <- (n-1)*60 + 1
stop_no <- start_no + 59
print(class(start_no))
write_csv(x = rbind(slice(experimental, start_no:stop_no), fillers_practice),
file = paste0("list", n, ".csv"))
}
map(1:12, create_lists)
create_lists <- function(n) {
start_no <- (n-1)*60 + 1
stop_no <- start_no + 59
write_csv(x = rbind(slice(experimental, start_no:stop_no), fillers_practice),
file = paste0(“list”, n, “.csv”))
}
create_lists <- function(n) {
start_no <- (n-1)*60 + 1
stop_no <- start_no + 59
write_csv(x = rbind(slice(experimental, start_no:stop_no), fillers_practice),
file = paste0("list", n, ".csv"))
}
map(1:12, create_lists)
create_lists <- function(n) {
start_no <- (n-1)*60 + 1
stop_no <- start_no + 59
write_csv(x = rbind(slice(experimental, start_no:stop_no), fillers_practice),
file = paste0("list", n, ".csv"))
}
map(1:12, create_lists)
create_lists <- function(n) {
start_no <- (n-1)*60 + 1
stop_no <- start_no + 59
write_csv(x = rbind(slice(experimental, start_no:stop_no), fillers_practice),
file = paste0("list", n, ".csv"))
}
map(1:12, create_lists)
create_lists <- function(n) {
start_no <- (n-1)*60 + 1
stop_no <- start_no + 59
write_csv(x = rbind(slice(experimental, start_no:stop_no), fillers_practice),
file = paste0("list", n, ".csv"))
}
map(1:12, create_lists)
id <- cbind(c(".", ".", "conventional", "inverted"), c("hi", "lo", ".", "."), rep("r2_s_contrast")) %>% as_tibble()
id <- cbind(c(".", ".", "conventional", "inverted"), c("hi", "lo", ".", "."), rep("r2_s_contrast"))
id
?as_tibble
id <- cbind(c(".", ".", "conventional", "inverted"), c("hi", "lo", ".", "."), rep("r2_s_contrast")) %>% as_tibble(.name_repair = "minimal")
id
id <- cbind(c(".", ".", "conventional", "inverted"), c("hi", "lo", ".", "."), rep("r2_s_contrast")) %>% as_tibble(.name_repair = "universal")
id
id <- cbind(c(".", ".", "conventional", "inverted"), c("hi", "lo", ".", "."), rep("r2_s_contrast")) %>% as_tibble(.name_repair = "unique")
id
cite(buildmer)
cite("buildmer")
citation("buildmer")
warnings()
knit_with_parameters("~/Documents/ANALYSIS/risk/paper1/paper1/Test/Test.Rmd")
print(sessionInfo())
knitr::purl("purl.Rmd")
knitr::purl("paper1.Rmd")
library(zoo)
library(ordinal)
library(patchwork)
library(magick)
library(emmeans)
library(egg)
library(scales)
library(buildmer)
library(lme4)
library(broom)
sessionInfo()
hist(rnorm(100))
library(papaja)
library(tidyverse)
library(zoo)
library(ordinal)
library(patchwork)
library(magick)
library(emmeans)
library(egg)
library(scales)
library(buildmer)
library(lme4)
library(broom)
sessionInfo()
library(papaja) #
library(tidyverse) #
library(zoo)
library(ordinal) #
library(patchwork) #
library(magick) #
library(emmeans) #
library(egg) #
library(scales) #
library(buildmer) #
library(lme4)
library(broom) #
sessionInfo()
rm(broom)
